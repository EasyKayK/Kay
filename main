import logging
import os
import random
import yfinance as yf
import pandas as pd
import ta

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# Enable logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# User balances
user_balances = {}

# Get indicator-based trade signal
def get_trade_signal(symbol="BTC-USD"):
    try:
        df = yf.download(symbol, period="1d", interval="1m")
        if df.empty or len(df) < 15:
            return "neutral"
        df.dropna(inplace=True)
        df['rsi'] = ta.momentum.RSIIndicator(df['Close']).rsi()
        df['ema_fast'] = ta.trend.EMAIndicator(df['Close'], window=5).ema_indicator()
        df['ema_slow'] = ta.trend.EMAIndicator(df['Close'], window=15).ema_indicator()
        latest = df.iloc[-1]

        if latest['rsi'] < 30 and latest['ema_fast'] > latest['ema_slow']:
            return "up"
        elif latest['rsi'] > 70 and latest['ema_fast'] < latest['ema_slow']:
            return "down"
        else:
            return "neutral"
    except Exception as e:
        logger.error(f"Error getting trade signal: {e}")
        return "neutral"

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 1000
    await update.message.reply_text(
        f"üëã Welcome to the Mock Trading Bot!\nYour demo balance is ${user_balances[user_id]:.2f}.\nUse /trade up/down 1min $amount"
    )

# Trade command
async def trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 1000

    try:
        direction = context.args[0].lower()
        duration = context.args[1]
        amount_str = context.args[2]

        if not amount_str.startswith("$"):
            raise ValueError("Invalid amount format.")
        amount = float(amount_str[1:])

        if amount <= 0 or amount > user_balances[user_id]:
            raise ValueError("Invalid trade amount.")

        signal = get_trade_signal()

        if signal == "neutral":
            outcome = random.choice(["win", "lose"])
        elif signal == direction:
            outcome = "win"
        else:
            outcome = "lose"

        if outcome == "win":
            profit = amount * 0.8
            user_balances[user_id] += profit
            result = f"‚úÖ You WON the trade! +${profit:.2f}"
        else:
            user_balances[user_id] -= amount
            result = f"‚ùå You LOST the trade! -${amount:.2f}"

        await update.message.reply_text(
            f"üìä Signal: {signal.upper()}\nüéØ Trade result: {outcome.upper()}\n{result}\nüí∞ New balance: ${user_balances[user_id]:.2f}"
        )

    except Exception as e:
        logger.error(e)
        await update.message.reply_text("Usage: /trade up/down 1min $amount\nExample: /trade up 1min $10")

# Balance command
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = user_balances.get(user_id, 1000)
    await update.message.reply_text(f"üí∞ Your current balance: ${balance:.2f}")

# Main function
def main():
    token = os.getenv(AAHRlZH2Q5CZOCUGPznOqLb_RiaLlXzx4HQ)
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN not set in environment variables.")

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("trade", trade))
    app.add_handler(CommandHandler("balance", balance))

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
